<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Posts on Power Platform Blog</title>
    <link>/posts/</link>
    <description>Recent content in Posts on Power Platform Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 03 Jun 2021 16:47:39 +0200</lastBuildDate>
    
        <atom:link href="/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>How to trigger a Flow based on the regarding object&#39;s type</title>
      <link>/posts/how-to-trigger-a-flow-based-on-the-regarding-objects-type/</link>
      <pubDate>Thu, 03 Jun 2021 16:47:39 +0200</pubDate>
      
      <guid>/posts/how-to-trigger-a-flow-based-on-the-regarding-objects-type/</guid>
      <description>A quick post today about an annoyance I found while implementing a Flow for a customer.
One of my customers&amp;rsquo; requirements was that a Flow should be only started when a phone call is created on the Timeline of leads.</description>
      
    </item>
    
    <item>
      <title>How to resolve a case using Flow</title>
      <link>/posts/how-to-resolve-a-case-using-flow/</link>
      <pubDate>Sat, 29 May 2021 11:15:44 +0200</pubDate>
      
      <guid>/posts/how-to-resolve-a-case-using-flow/</guid>
      <description>In a classic workflow it is quite easy to resolve a case, because we can just update the status as a step in the workflow. To my surprise, when I tried to use the same logic in Flow by updating the Status and Status Reason fields, this didn&amp;rsquo;t work.</description>
      
    </item>
    
    <item>
      <title>How to fix your sales pipeline after reordering business process flow stages </title>
      <link>/posts/how-to-fix-your-sales-pipeline-after-reordering-business-process-flow-stages/</link>
      <pubDate>Fri, 23 Apr 2021 13:44:44 +0200</pubDate>
      
      <guid>/posts/how-to-fix-your-sales-pipeline-after-reordering-business-process-flow-stages/</guid>
      <description>In the previous post I talked about sorting a pipeline chart by option set labels instead of its values if you use a option set for ordering your pipeline. However, the default sales pipeline order by the field &amp;lsquo;Pipeline Phase&amp;rsquo; - which is a text field.</description>
      
    </item>
    
    <item>
      <title>Sort sales pipeline by option set labels</title>
      <link>/posts/sort-sales-pipeline-by-option-set-labels/</link>
      <pubDate>Thu, 04 Feb 2021 08:58:37 +0100</pubDate>
      
      <guid>/posts/sort-sales-pipeline-by-option-set-labels/</guid>
      <description>If you use the sales pipeline chart in combination with an option set for your visualization, by default the chart is ordered by the option set value. But what if you want to order by the labels of the option set instead?</description>
      
    </item>
    
    <item>
      <title>How to use filter array data operation</title>
      <link>/posts/how-to-use-filter-arrays/</link>
      <pubDate>Wed, 02 Sep 2020 11:43:37 +0200</pubDate>
      
      <guid>/posts/how-to-use-filter-arrays/</guid>
      <description>The Common Data Service connectors provides two actions to retrieve data from other entities: Get a record, and List records. The Get a record action is straightforward: provide the entity name and the GUID of the record you want to retrieve.</description>
      
    </item>
    
    <item>
      <title>Sending Emails with Flow</title>
      <link>/posts/sending-emails-with-flow/</link>
      <pubDate>Sun, 12 Jul 2020 09:00:53 +0200</pubDate>
      
      <guid>/posts/sending-emails-with-flow/</guid>
      <description>A common steps to use in a Dynamics CRM workflow is Send email. This is pretty straightforward: in this single step you can define the sender, recipient(s), body and all other available fields of the email entity.</description>
      
    </item>
    
    <item>
      <title>A quicker method to map different option set values in Flow</title>
      <link>/posts/a-quicker-method-to-map-different-option-set-values-in-flow/</link>
      <pubDate>Fri, 01 May 2020 12:01:44 +0200</pubDate>
      
      <guid>/posts/a-quicker-method-to-map-different-option-set-values-in-flow/</guid>
      <description>If you want to map input from one CDS option set to another with the same values in Flow, all you have to do is map the corresponding field - easy.</description>
      
    </item>
    
    <item>
      <title>How to actually list ALL CDS records in Flow</title>
      <link>/posts/how-to-actually-list-all-cds-records-in-flow/</link>
      <pubDate>Sat, 18 Apr 2020 12:01:44 +0200</pubDate>
      
      <guid>/posts/how-to-actually-list-all-cds-records-in-flow/</guid>
      <description>The List records action in the Common Data Service (current) connector can be used to retrieve records from an entity in the CDS. Technically, this action returns an EntityItemList body, which is an array of individual EntityItems1.</description>
      
    </item>
    
    <item>
      <title>Troubleshooting the ribbon - UCI style</title>
      <link>/posts/troubleshooting-the-uci-ribbon/</link>
      <pubDate>Sat, 11 Apr 2020 12:01:40 +0200</pubDate>
      
      <guid>/posts/troubleshooting-the-uci-ribbon/</guid>
      <description>The customization of the Dynamics 365 ribbon is often done through the Ribbon Workbench1, which removes the need to manually edit the RibbonDiff.xml. However, if you only need to troubleshoot why a (customized) button on the ribbon is not behaving like it should (or not showing at all), there might be a quicker way introduced in the Unified Client Interface (UCI):</description>
      
    </item>
    
    <item>
      <title>Using the right Common Data Service Connector in Flow</title>
      <link>/posts/using-the-right-common-data-service-connector-in-flow/</link>
      <pubDate>Thu, 02 Apr 2020 12:01:26 +0200</pubDate>
      
      <guid>/posts/using-the-right-common-data-service-connector-in-flow/</guid>
      <description>Microsoft Flow opens up new possibilities for low-code development with the Common Data Service. By default, when creating a new Flow, the Common Data Service connector catches the eye immediately.</description>
      
    </item>
    
  </channel>
</rss>
